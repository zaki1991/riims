apply plugin: 'maven'

// Create a source jar for uploading
task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.java.srcDirs
    include '**/*.java', '**/*.aj'
}

artifacts {
    archives sourceJar
}

install {
    repositories.mavenInstaller {
        customizePom(pom, project)
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: hkntvMavenReleaseRepository) {  
                authentication(userName: deploymentUsername, password: deploymentPassword) 
            }
            snapshotRepository(url: hkntvMavenSnapshotRepository) {
                authentication(userName: deploymentUsername, password: deploymentPassword)
            }
            customizePom(pom, project)
        }
        
    }
}

def customizePom(pom, gradleProject) {
    pom.whenConfigured { p ->
        p.dependencies.findAll{ it.scope == "optional" }.each {
            it.scope = "compile"
            it.optional = true
        }
        // sort to make pom dependencies order consistent to ease comparison of older poms
        p.dependencies = p.dependencies.sort { dep ->
            "$dep.scope:$dep.optional:$dep.groupId:$dep.artifactId"
        }
    }
    def isWar = gradleProject.hasProperty('war')
    def isService = gradleProject.name.endsWith('service')
    pom.project {
        if(isWar) {
            packaging = "war"
        }
        name = gradleProject.name
        description = gradleProject.description
        organization {
            name = "hkntv"
        }
        if(isWar) {
            properties {
                'm2eclipse.wtp.contextRoot' '/' + project.war.baseName
            }
        }
        
    }
}

task generatePom {
    group = 'Build'
    description = 'Generates a Maven pom.xml'

    ext.generatedPomFileName = "pom.xml"
    onlyIf { install.enabled }

    inputs.files(fileTree(project.rootProject.rootDir).include("**/*.gradle").files)
    inputs.files(new File(project.rootProject.rootDir, Project.GRADLE_PROPERTIES))
    outputs.files(generatedPomFileName)

    doLast() {
        def p = pom {}
        customizePom(p, project)
        p.writeTo(generatedPomFileName)
    }
}

build.dependsOn generatePom
